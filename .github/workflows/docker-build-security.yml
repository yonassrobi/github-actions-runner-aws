name: Build and push security runner image

on:
  push:
    branches-ignore: # TODO update and make this a reusable workflow
      - yonas-security-skip-build

jobs:
  set-runner-uuid:
    name: Set runner UUID
    runs-on: ubuntu-latest
    outputs:
      runner-uuid: ${{ steps.set-uuid.outputs.runner-uuid }}
    steps:
      - name: Set UUID for the runner
        id: set-uuid
        run: echo "::set-output name=runner-uuid::$(uuidgen)"

  build-and-run:
    name: Build, test, and run the runner image
    runs-on: ubuntu-latest
    needs: set-runner-uuid
    outputs:
      sha-tag: ${{ steps.set-sha-tag.outputs.sha-tag }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
        uses: aws-actions/configure-aws-credentials@v1

      - name: Log in to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set short SHA for tag
        id: set-sha-tag
        run: echo "::set-output name=sha-tag::$(git rev-parse --short "$GITHUB_SHA")"

      - name: Set SHA tag for Docker image
        run: echo "SHA_TAG=${{ steps.login-ecr.outputs.registry }}/github-actions-runner:${{ steps.set-sha-tag.outputs.sha-tag }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          load: true # export a tarball so we can test the image locally before pushing
          tags: ${{ env.SHA_TAG }}, security
          file: security.Dockerfile
          cache-from: type=gha # use the GitHub Cache API
          cache-to: type=gha,mode=max

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ${{ env.SHA_TAG }}
      #     format: "table"
      #     exit-code: "1"
      #     ignore-unfixed: true
      #     vuln-type: "os,library"
      #     severity: "CRITICAL,HIGH"

      # - name: Run Dockle image linter
      #   uses: hands-lab/dockle-action@v1
      #   env:
      #     DOCKLE_ACCEPT_FILE_EXTENSIONS: pem
      #   with:
      #     image: ${{ env.SHA_TAG }}
      #     exit-code: "1"

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.SHA_TAG }}

      - name: Run Docker image
        run: |
          docker run --rm \
          -e REPO_OWNER=CMSgov \
          -e REPO_NAME=github-actions-runner-aws \
          -e PERSONAL_ACCESS_TOKEN=${{ secrets.BHARVEY_GITHUB_TOKEN}} \
          -e RUNNER_UUID=${{ needs.set-runner-uuid.outputs.runner-uuid }} \
          ${{ env.SHA_TAG }}

  wait-for-runner:
    name: Wait for the runner to be ready
    needs: set-runner-uuid
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Poll the GitHub Actions API until the runner is registered and online
        run: |
          until \
            curl -s \
              -H "Accept: application/vnd.github.v3+json" \
              -u robot-mac-fc:${{ secrets.BHARVEY_GITHUB_TOKEN }} \
              https://api.github.com/repos/CMSgov/github-actions-runner-aws/actions/runners \
            | jq -e '.runners | .[] | select(.name == "${{ needs.set-runner-uuid.outputs.runner-uuid }}") | .status == "online"' >/dev/null
          do
            echo "Waiting for runner ${{ needs.set-runner-uuid.outputs.runner-uuid }} to be ready" && sleep 10
          done
          echo "Runner ${{ needs.set-runner-uuid.outputs.runner-uuid }} is ready"

  test-runner:
    name: Test the runner
    needs: [wait-for-runner, set-runner-uuid]
    runs-on:
      - self-hosted
      - ${{ needs.set-runner-uuid.outputs.runner-uuid }}
    steps:
      - name: step 1
        run: echo "Self-hosted runner test was successful!"

  add-tag-if-main:
    name: Add 'latest' tag to image if branch is 'main'
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [test-runner, build-and-run]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
        uses: aws-actions/configure-aws-credentials@v1

      - name: Add 'latest' tag to image
        uses: abronin/ecr-retag-action@v1
        with:
          repository: github-actions-runner
          tag: ${{ needs.build-and-run.outputs.sha-tag }}
          new-tags: latest
